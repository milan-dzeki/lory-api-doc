{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8KAyPeA,MAvPf,WACE,OACE,qCACE,8CAGA,iCAEE,oCACE,sDAGA,oBAAGC,UAAU,MAAb,uBACY,mDAEZ,mBAAGA,UAAU,WAAb,wBACA,+BACE,qCACK,uCADL,+BAEE,uBACA,uBACA,2CAJF,OAKE,uBACA,uBACA,0BAEF,qCACK,+CADL,mCAEE,uBACA,uBACA,2CAJF,QAKE,uBACA,uBACA,6CAPF,iDAQE,uBACA,uBACA,gDAVF,sLAWE,uBACA,uBACA,wDAbF,IAaoC,+CAbpC,kDAcE,uBACA,uBACA,0BAEF,qCACK,4CADL,qBAEE,uBACA,uBACA,2CAJF,QAKE,uBACA,uBACA,6CAPF,oBAQE,uBACA,uBATF,oCAWE,uBACA,uBACA,wDAbF,IAaoC,gDAbpC,qDAkBJ,oCACE,2CAGA,oBAAGA,UAAU,MAAb,uBACY,uDAEZ,mBAAGA,UAAU,WAAb,wBACA,+BACE,qCACK,0CADL,4CAEE,uBACA,uBACA,2CAJF,OAKE,uBACA,uBACA,0BAEF,qCACK,0CADL,wCAEE,uBACA,uBACA,2CAJF,OAKE,uBACA,uBACA,0BAEF,qCACK,uCADL,4CAEE,uBACA,uBACA,2CAJF,iBASJ,oCACE,0CAGA,oBAAGA,UAAU,MAAb,uBACY,sDAEZ,mBAAGA,UAAU,WAAb,wBACA,+BACE,qCACK,uCADL,kCAEE,uBACA,uBACA,2CAJF,OAKE,uBACA,uBACA,0BAEF,qCACK,0CADL,4BAEE,uBACA,uBACA,2CAJF,QAKE,uBACA,uBACA,6CAPF,oCAQE,uBACA,uBACA,gDAVF,yJAWE,uBACA,uBACA,wDAbF,IAaoC,mDAbpC,wCAcE,uBACA,uBACA,0BAEF,qCACK,+CADL,+CAEE,uBACA,uBACA,2CAJF,QAKE,uBACA,uBACA,0BAEF,qCACK,8CADL,kCAEE,uBACA,uBACA,2CAJF,OAKE,uBACA,uBACA,0BAEF,qCACK,iDADL,8BAEE,uBACA,uBACA,2CAJF,OAKE,uBACA,uBACA,0BAEF,qCACK,+CADL,sDAEE,uBACA,uBACA,2CAJF,QAKE,uBACA,uBACA,wDAPF,IAOoC,+CAPpC,0DAYJ,oCACE,yCAGA,oBAAGA,UAAU,MAAb,uBACY,qDAEZ,mBAAGA,UAAU,WAAb,wBACA,+BACE,qCACK,uCADL,iCAEE,uBACA,uBACA,2CAJF,OAKE,uBACA,uBACA,0BAEF,qCACK,0CADL,sCAEE,uBACA,uBACA,2CAJF,QAKE,uBACA,uBACA,6CAPF,gKASE,uBACA,uBACA,wDAXF,IAWoC,mDAXpC,kEAYE,uBACA,uBACA,0BAEF,qCACK,iDADL,+BAEE,uBACA,uBACA,2CAJF,UAKE,uBACA,uBACA,0BAEF,qCACK,+CADL,yCAEE,uBACA,uBACA,2CAJF,gBASJ,oCACE,+CAGA,oBAAGA,UAAU,MAAb,uBACY,2DAEZ,mBAAGA,UAAU,WAAb,wBACA,6BACE,qCACK,uCADL,wCAEE,uBACA,uBACA,2CAJF,sBChOGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.989c3065.chunk.js","sourcesContent":["import React from 'react';\n\nfunction App() {\n  return (\n    <>\n      <header>\n        Lory API\n      </header>\n      <main>\n        {/* section */}\n        <section>\n          <h2>\n            authentication/users\n          </h2>\n          <p className=\"url\">\n            base url: <strong>/api/users</strong>\n          </p>\n          <p className=\"endpoint\">endpoints:</p>\n          <ul>\n            <li>\n              1. <strong>/</strong> ---- gets all users from db\n              <br />\n              <br />\n              <span>method:</span> GET\n              <br />\n              <br />\n              <hr />\n            </li>\n            <li>\n              2. <strong>/register</strong> ---- creates/registers new user\n              <br />\n              <br />\n              <span>method:</span> POST\n              <br />\n              <br />\n              <span>recieves:</span> first name, last name, phone, email, password\n              <br />\n              <br />\n              <span>saves to DB:</span> firstName, lastName, email, phone, password(hashed), fullName, isAdmin(initially false), isTandem(initially null), companyId(initially null), vehicleId(initially null), createdAt\n              <br />\n              <br />\n              <span>applied middlewares:</span> <strong>checkUser</strong> ---- checks if user email already exists in DB\n              <br />\n              <br />\n              <hr />\n            </li>\n            <li>\n              3. <strong>/login</strong> ---- logs user in\n              <br />\n              <br />\n              <span>method:</span> POST\n              <br />\n              <br />\n              <span>recieves:</span>  email, password\n              <br />\n              <br />\n              signs JWT which is send to client\n              <br />\n              <br />\n              <span>applied middlewares:</span> <strong>checkLogin</strong> ---- checks if user is already logged in\n            </li>\n          </ul>\n        </section>\n        {/* section */}\n        <section>\n          <h2>\n            user data\n          </h2>\n          <p className=\"url\">\n            base url: <strong>/api/user-data</strong>\n          </p>\n          <p className=\"endpoint\">endpoints:</p>\n          <ul>\n            <li>\n              1. <strong>/all</strong> ---- gets all data for all users from DB\n              <br />\n              <br />\n              <span>method:</span> GET\n              <br />\n              <br />\n              <hr />\n            </li>\n            <li>\n              2. <strong>/:id</strong> -- gets all data for particular user\n              <br />\n              <br />\n              <span>method:</span> GET\n              <br />\n              <br />\n              <hr />\n            </li>\n            <li>\n              3. <strong>/</strong> --- adds new data to userData collection\n              <br />\n              <br />\n              <span>method:</span> POST\n            </li>\n          </ul>\n        </section>\n        {/* section */}\n        <section>\n          <h2>\n            vehicles\n          </h2>\n          <p className=\"url\">\n            base url: <strong>/api/vehicles</strong>\n          </p>\n          <p className=\"endpoint\">endpoints:</p>\n          <ul>\n            <li>\n              1. <strong>/</strong> ---- gets all vehicles from DB\n              <br />\n              <br />\n              <span>method:</span> GET\n              <br />\n              <br />\n              <hr />\n            </li>\n            <li>\n              2. <strong>/add</strong> ---- creates new vehicle\n              <br />\n              <br />\n              <span>method:</span> POST\n              <br />\n              <br />\n              <span>recieves:</span>  name, licensePlate, description\n              <br />\n              <br />\n              <span>saves to DB:</span> name, licensePlate, description, createData, hasDriver(initially false), idPair(initially false), idTandem(initially false), deviceID(initially null)\n              <br />\n              <br />\n              <span>applied middlewares:</span> <strong>checkIfExists</strong> ---- checks if vehicle aready exists\n              <br />\n              <br />\n              <hr />\n            </li>\n            <li>\n              3. <strong>/edit/:id</strong> --- edits properties for particular vehicle\n              <br />\n              <br />\n              <span>method:</span> POST\n              <br />\n              <br />\n              <hr />\n            </li>\n            <li>\n              4. <strong>/devices</strong> ---- gets devices for vehicles\n              <br />\n              <br />\n              <span>method:</span> GET\n              <br />\n              <br />\n              <hr />\n            </li>\n            <li>\n              5. <strong>/device/:id</strong> --- gets particular device\n              <br />\n              <br />\n              <span>method:</span> GET\n              <br />\n              <br />\n              <hr />\n            </li>\n            <li>\n              6. <strong>/pair/:id</strong> ---- pairs particular vehicle with tracking device\n              <br />\n              <br />\n              <span>method:</span> POST\n              <br />\n              <br />\n              <span>applied middlewares:</span> <strong>getDevice</strong> ---- gets device to be connected with vehicle\n            </li>\n          </ul>\n        </section>\n        {/* section */}\n        <section>\n          <h2>\n            drivers\n          </h2>\n          <p className=\"url\">\n            base url: <strong>/api/drivers</strong>\n          </p>\n          <p className=\"endpoint\">endpoints:</p>\n          <ul>\n            <li>\n              1. <strong>/</strong> ---- gets all drivers from DB\n              <br />\n              <br />\n              <span>method:</span> GET\n              <br />\n              <br />\n              <hr />\n            </li>\n            <li>\n              2. <strong>/add</strong> ---- creates/adds new driver to DB\n              <br />\n              <br />\n              <span>method:</span> POST\n              <br />\n              <br />\n              <span>recieves:</span>  firstName, lastName, email, vehicle, password, confirmPassword, description\n              saves to DB: firstName, lastName, email, vehicle, password(hashed), description\n              <br />\n              <br />\n              <span>applied middlewares:</span> <strong>checkIfExists</strong> ---- check if driver with provided email alreeady exists in DB\n              <br />\n              <br />\n              <hr />\n            </li>\n            <li>\n              3. <strong>/delete/:id</strong> ---- removes driver from DB\n              <br />\n              <br />\n              <span>method:</span> DELETE\n              <br />\n              <br />\n              <hr />\n            </li>\n            <li>\n              3. <strong>/edit/:id</strong> ---- edit certain driver's properties\n              <br />\n              <br />\n              <span>method:</span> PUT\n            </li>\n          </ul>\n        </section>\n         {/* section */}\n        <section>\n          <h2>\n            tandem driver\n          </h2>\n          <p className=\"url\">\n            base url: <strong>/api/tandem-driver</strong>\n          </p>\n          <p className=\"endpoint\">endpoints:</p>\n          <ul>\n            <li>\n              1. <strong>/</strong> ---- gets all tandem drivers from DB\n              <br />\n              <br />\n              <span>method:</span> GET\n            </li>\n          </ul>\n        </section>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}